/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  ExampleNFTRenderer,
  ExampleNFTRendererInterface,
} from "../ExampleNFTRenderer";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC721",
        name: "_nft",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "nft",
    outputs: [
      {
        internalType: "contract IERC721",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516101cd3803806101cd83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161014361008a6000396000604001526101436000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806347ccca021461003b578063c87b56dd1461007f575b600080fd5b6100627f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100bb61008d3660046100c8565b5060408051808201909152601381527268747470733a2f2f6578616d706c652e636f6d60681b602082015290565b60405161007691906100e1565b6000602082840312156100da57600080fd5b5035919050565b600060208083528351808285015260005b8181101561010e578581018301518582016040015282016100f2565b81811115610120576000604083870101525b50601f01601f191692909201604001939250505056fea164736f6c634300080d000a";

type ExampleNFTRendererConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExampleNFTRendererConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExampleNFTRenderer__factory extends ContractFactory {
  constructor(...args: ExampleNFTRendererConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _nft: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ExampleNFTRenderer> {
    return super.deploy(_nft, overrides || {}) as Promise<ExampleNFTRenderer>;
  }
  override getDeployTransaction(
    _nft: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_nft, overrides || {});
  }
  override attach(address: string): ExampleNFTRenderer {
    return super.attach(address) as ExampleNFTRenderer;
  }
  override connect(signer: Signer): ExampleNFTRenderer__factory {
    return super.connect(signer) as ExampleNFTRenderer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExampleNFTRendererInterface {
    return new utils.Interface(_abi) as ExampleNFTRendererInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExampleNFTRenderer {
    return new Contract(address, _abi, signerOrProvider) as ExampleNFTRenderer;
  }
}
